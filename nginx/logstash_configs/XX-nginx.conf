filter {
  if "nginx" in [tags] {

    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => "%{NGINXACCESS}" }
    }

    if [referrer] =~ /^http/ {
      grok {
        match => ["referrer", "/(?<request_domain>[^/]+)"]
      }
    } else {
      mutate {
        add_field => { "request_domain" => "void" }
      }
    }

    date {
      match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
    }

    ruby {
      code => '
        days = event.get("rtmp_session_duration.days")
        hours = event.get("rtmp_session_duration.hours")
        minutes = event.get("rtmp_session_duration.minutes")
        seconds = event.get("rtmp_session_duration.seconds")

        seconds_sum = 0

        if days
          days_numeric = days.to_i
          days_as_seconds = days_numeric * 24 * 3600
          seconds_sum += days_as_seconds
        end

        if hours
          hours_numeric = hours.to_i
          hours_as_seconds = hours_numeric * 3600
          seconds_sum += hours_as_seconds.to_i
        end

        if minutes
          minutes_numeric = minutes.to_i
          minutes_as_seconds = minutes_numeric * 60
          seconds_sum += minutes_as_seconds.to_i
        end

        if seconds
          seconds_sum += seconds.to_i
        end

        event.set("duration", seconds_sum)
     '
    }

    if [clientip]  {
      geoip {
        source => "clientip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float" ]
      }
    }

    if "_grokparsefailure" not in [tags] {
      mutate {
        remove_field => "message"
        add_tag => "nginxmatch"
      }
    }

    if "_grokparsefailure" in [tags] {
      drop { }
    }

  }
}
